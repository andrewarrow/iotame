package main

import "fmt"
import "github.com/iotaledger/giota"

func main() {
	/*

	   hash: String 81-trytes unique hash of this transaction
	   signatureMessageFragment : String 2187-trytes signature message fragment. In case there is a spent input, the signature of the private key is stored here. If no signature is required, it is empty (all 9's) and can be used for storing the message value when making a transfer. More to that later.
	   address: String 81-trytes address. In case this is an *output*, then this is the address of the recipient. In case it is an *input*, then it is the address of the input which is used to send the tokens from (i.e. address generated from the private key)
	   value : Int value transferred in this transaction
	   timestamp : Int timestamp of the transaction. It is important to know that timestamps in IOTA are not enforced.
	   currentIndex : Int the index of this transaction in the bundle.
	   lastIndex : Int the total number of transactions in this bundle
	   bundle: String81-tryte bundle hash, which is used for grouping transactions of the bundle together. With the bundle hash you can identify transactions which were in the same bundle.
	   trunkTransaction : String 81-trytes hash of the first transaction that was approved with this transaction
	   branchTransaction: String 81-trytes hash of the second transaction that was approved with this transaction
	   nonce: String 81-trytes hash. The nonce is required for the transaction to be accepted by the network. It is generated by doing Proof of Work (either in IRI via the attachToTangle API call, or with one of the libraries such as ccurl).

	*/
	tx
	fmt.Println(len(tx))
}
func main3() {
	server := "http://iota.bitfinex.com:80"
	server = "http://176.9.3.149:14265"
	api := giota.NewAPI(server, nil)
	resp, err := api.GetNodeInfo()
	fmt.Println(resp, err)
}

func main2() {
	tritsFrom := []int8{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, -1, 1}
	trits, _ := giota.ToTrits(tritsFrom)

	trytes := trits.Trytes()
	//fmt.Println(trytes)
	//trytesFrom := "ABCDEAAC9ACB9PO..."
	//trytes2, _ := giota.ToTrytes(trytesFrom)

	//hash := trytes.Hash()

	//api := giota.NewAPI("http://localhost:14265", nil)
	//resp, err := api.FindTransactions([]giota.Trytes{"DEXRPL...SJRU"})

	index := 0
	security := 2
	adr, _ := giota.NewAddress(trytes, index, security) //without checksum.
	//fmt.Println(err)
	fmt.Println(adr)
	//adrWithChecksum := adr.WithChecksum() //adrWithChecksum is trytes type.
	//fmt.Println(adrWithChecksum)

	/*
		tx, err := giota.NewTransaction(trytes)
		mwm := 15
		if tx.HasValidNonce(mwm) {
		}
		trytes2 := tx.trytes()

		key := giota.NewKey(seed, index, security)
		norm := bundleHash.Normalize()
		sign := giota.Sign(norm[:27], key[:6561/3])

		if giota.ValidateSig(adr, []giota.Trytes{sign}, bundleHash) {
		}

		trs := []giota.Transfer{
			giota.Transfer{
				Address: "KTXF...QTIWOWTY",
				Value:   20,
				Tag:     "MOUDAMEPO",
			},
		}
		_, pow := giota.GetBestPoW()
		bdl, err = giota.Send(api, seed, security, trs, mwm, pow)
	*/
}
